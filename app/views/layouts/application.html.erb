<!DOCTYPE html>
<html>
  <head>
    <title>LiveAndLearn</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>

  </head>
  <body>
    <div class="containter defaultBackground">
    <div class="row">
      <div class="col-sm-1">
      </div>
      <div class="col-sm-10">
        <ul class="nav nav-pills navbar navbar-fixed-top">
        <h2 class="liveAndLearn">Live and Learn</h2>
          <li role="presentation">
            <div class="dropdown">
              <button class="dropdown-toggle" type="button" data-toggle="dropdown">Categories
                <span class="caret"></span></button>
                <ul class="dropdown-menu">
                  <li><a href="#">Computer Science/Web Development</a></li>
                  <li><a href="#">Art</a></li>
                  <li><a href="#">Fitness</a></li>
                  <li><a href="#">MMA</a></li>
                  <li><a href="#">Cycling</a></li>
                  <li><a href="#">Entrepeneurship</a></li>
                </ul>
            </div>
          </li>
          <li role="presentation">
            <div class="input-group stylish-input-group">
              <input type="text" class="form-control"  placeholder="Search" >
              <span class="input-group-addon">
                <button type="submit">
                  <span class="glyphicon glyphicon-search"></span>
                </button>
              </span>
            </div>
          </li>
          <% if user_signed_in? %>
            <li class="pull-right">
            <%= link_to('Logout', destroy_user_session_path, :method => :delete) %>
            </li>
            <% else %>
            <li class="pull-right">
            <%= link_to('Login', new_user_session_path)  %>
            </li>
          <% end %>
          <li role="presentation" class="pull-right"><%= link_to "Profile", user_path(current_user) if current_user%></a></li>
          <li role="presentation" class="pull-right"><%= link_to "Home", root_path %></li>
          <li role="presentation" class="pull-right"><%= link_to "Listings", listings_path() %></li>
        </ul>
      </div>
      <div class="col-sm-1">
      </div>
      <h1 class="smallLiveAndLearn liveAndLearn text-center">Live and Learn</h1>
      <%= yield %>
    </div>
    <script type='text/javascript'>
      (function ($) {
        var Quickfit, QuickfitHelper, defaults, pluginName;

        pluginName = 'quickfit';

        defaults = {
          min: 8,
          max: 12,
          tolerance: 0.02,
          truncate: false,
          width: null,
          sampleNumberOfLetters: 10,
          sampleFontSize: 12
        };
        QuickfitHelper = (function () {

          var sharedInstance = null;

          QuickfitHelper.instance = function (options) {
            if (!sharedInstance) {
              sharedInstance = new QuickfitHelper(options);
            }
            return sharedInstance;
          };

          function QuickfitHelper(options) {
            this.options = options;

            this.item = $('<span id="meassure"></span>');
            this.item.css({
              position: 'absolute',
              left: '-1000px',
              top: '-1000px',
              'font-size': "" + this.options.sampleFontSize + "px"
            });
            $('body').append(this.item);

            this.meassures = {};
          }

          QuickfitHelper.prototype.getMeassure = function (letter) {
            var currentMeassure;
            currentMeassure = this.meassures[letter];
            if (!currentMeassure) {
              currentMeassure = this.setMeassure(letter);
            }
            return currentMeassure;
          };

          QuickfitHelper.prototype.setMeassure = function (letter) {
            var currentMeassure, index, sampleLetter, text, _ref;

            text = '';
            sampleLetter = letter === ' ' ? '&nbsp;' : letter;

            for (index = 0, _ref = this.options.sampleNumberOfLetters - 1; 0 <= _ref ? index <= _ref : index >= _ref; 0 <= _ref ? index++ : index--) {
              text += sampleLetter;
            }

            this.item.html(text);
            currentMeassure = this.item.width() / this.options.sampleNumberOfLetters / this.options.sampleFontSize;
            this.meassures[letter] = currentMeassure;

            return currentMeassure;
          };

          return QuickfitHelper;

        })();

        Quickfit = (function () {

          function Quickfit(element, options) {
            this.$element = element;
            this.options = $.extend({}, defaults, options);
            this.$element = $(this.$element);
            this._defaults = defaults;
            this._name = pluginName;
            this.quickfitHelper = QuickfitHelper.instance(this.options);
          }

          Quickfit.prototype.fit = function () {
            var elementWidth;
            if (!this.options.width) {
              elementWidth = this.$element.width();
              this.options.width = elementWidth - this.options.tolerance * elementWidth;
            }
            if (this.text = this.$element.attr('data-quickfit')) {
              this.previouslyTruncated = true;
            } else {
              this.text = this.$element.text();
            }
            this.calculateFontSize();

            if (this.options.truncate) this.truncate();

            return {
              $element: this.$element,
              size: this.fontSize
            };
          };

          Quickfit.prototype.calculateFontSize = function () {
            var letter, textWidth, i;

            textWidth = 0;
            for (i = 0; i < this.text.length; ++i) {
              letter = this.text.charAt(i);
              textWidth += this.quickfitHelper.getMeassure(letter);
            }

            this.targetFontSize = parseInt(this.options.width / textWidth);
            return this.fontSize = Math.max(this.options.min, Math.min(this.options.max, this.targetFontSize));
          };

          Quickfit.prototype.truncate = function () {
            var index, lastLetter, letter, textToAdd, textWidth;

            if (this.fontSize > this.targetFontSize) {
              textToAdd = '';
              textWidth = 3 * this.quickfitHelper.getMeassure('.') * this.fontSize;

              index = 0;
              while (textWidth < this.options.width && index < this.text.length) {
                letter = this.text[index++];
                if (lastLetter) textToAdd += lastLetter;
                textWidth += this.fontSize * this.quickfitHelper.getMeassure(letter);
                lastLetter = letter;
              }

              if (textToAdd.length + 1 === this.text.length) {
                textToAdd = this.text;
              } else {
                textToAdd += '...';
              }
              this.textWasTruncated = true;

              return this.$element.attr('data-quickfit', this.text).html(textToAdd);

            } else {
              if (this.previouslyTruncated) {
                return this.$element.html(this.text);
              }
            }
          };

          return Quickfit;

        })();

        return $.fn.quickfit = function (options) {
          var measurements = [];

          // Separate measurements from repaints
          // First calculate all measurements...
          var $elements = this.each(function () {
            var measurement = new Quickfit(this, options).fit();
            measurements.push(measurement);
            return measurement.$element;
          });

          // ... then apply the measurements.
          for (var i = 0; i < measurements.length; i++) {
            var measurement = measurements[i];

            measurement.$element.css({ fontSize: measurement.size + 'px' });
          }

          return $elements;
        };

      })(jQuery, window);

      $(".panel .panel-heading").each(function(index, value) {
        console.log("here");
        $(value).quickfit({min: 2, max: 25, truncate: true, tolerance: 0.05, width: 300 });
      });
    </script>

  </body>
</html>
